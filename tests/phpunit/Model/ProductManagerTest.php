<?php
declare(strict_types=1);

namespace Test;

use App\Models\Dto\ProductDataTransferObject;
use App\Models\ProductManager;
use App\Models\ProductRepository;
use App\Services\SQLConnector;
use PHPUnit\Framework\TestCase;
use Test\phpunit\Helper\ProductHelperTest;

class ProductManagerTest extends TestCase
{
    private ProductHelperTest $productHelper;

    protected function setUp(): void
    {
        parent::setUp();
        $this->productHelper = new ProductHelperTest();

    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->productHelper->deleteTemporaryProducts();
    }


    public function testSaveInsert(): void
    {
        $productDataTransferObject = new ProductDataTransferObject();
        $productDataTransferObject->setName('filip');
        $productDataTransferObject->setDescription('lorem filip');

        $productManager = new ProductManager(new SQLConnector());
        $actualValue = $productManager->save($productDataTransferObject);

        $productRepository = new ProductRepository();
        $valueFromDatabase = $productRepository->getProduct($actualValue->getId());

        self::assertSame('filip', $valueFromDatabase->getName());
        self::assertSame('lorem filip', $valueFromDatabase->getDescription());
        $this->productHelper->deleteTemporaryProducts();
    }

    public function testSaveUpdate(): void
    {
        $listOfProducts = $this->productHelper->createTemporaryProducts();

        $productDataTransferObject = new ProductDataTransferObject();
        $productDataTransferObject->setId($listOfProducts[2]->getId());
        $productDataTransferObject->setName('Unit Test');
        $productDataTransferObject->setDescription('Blbalbal');

        $productManager = new ProductManager(new SQLConnector());
        $actualValue = $productManager->save($productDataTransferObject);

        $productRepository = new ProductRepository();
        $listFromDatabase = $productRepository->getProduct($productDataTransferObject->getId());

        //self::assertSame($actualValue->getId(), $listFromDatabase->getId());

        self::assertSame($productDataTransferObject->getId(), $listFromDatabase->getId());
        self::assertSame($productDataTransferObject->getName(), $listFromDatabase->getName());
        self::assertSame($productDataTransferObject->getDescription(), $listFromDatabase->getDescription());
    }

    public function testDelete(): void
    {
        $this->productHelper->createTemporaryProducts();
        $productRepository = new ProductRepository();
        $productDataTransferObject = $productRepository->getProduct(2);

        $productManager = new ProductManager(new SQLConnector());
        $productManager->delete($productDataTransferObject);

        self::assertNull($productRepository->getProduct(2));
    }


}
