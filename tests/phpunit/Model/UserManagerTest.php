<?php

namespace Test;

use App\Models\Dto\UserDataTransferObject;
use App\Models\UserManager;
use App\Models\UserRepository;
use App\Services\SQLConnector;
use http\Client\Curl\User;
use PHPUnit\Framework\TestCase;
use Test\phpunit\Helper\UserHelperTest;

class UserManagerTest extends TestCase
{

    private UserHelperTest $userHelper;

    protected function setUp(): void
    {
        parent::setUp();
        $this->userHelper = new UserHelperTest();
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->userHelper->deleteTemporaryUsers();
    }

    public function testSaveInsert(): void
    {
        $userDataTransferObject = new UserDataTransferObject();
        $userDataTransferObject->setUserName('Filip');
        $userDataTransferObject->setPassword('e');
        $userDataTransferObject->setUserRole('Customer');

        $productManager = new UserManager(new SQLConnector());
        $actualValue = $productManager->save($userDataTransferObject);

        $productRepository = new UserRepository();
        $valueFromDatabase = $productRepository->getUser($actualValue->getUserName(),$actualValue->getPassword());

        self::assertSame('Filip', $valueFromDatabase->getUserName());
        self::assertSame('e', $valueFromDatabase->getPassword());
        self::assertSame('Customer', $valueFromDatabase->getUserRole());
        $this->userHelper->deleteTemporaryUsers();
    }

    public function testSaveUpdate(): void
    {
        $listOfUsers = $this->userHelper->createTemporaryUsers();

        $userDataTransferObject = new UserDataTransferObject();
        $userDataTransferObject->setId($listOfUsers[2]->getId());
        $userDataTransferObject->setUserName('William');
        $userDataTransferObject->setPassword('d');
        $userDataTransferObject->setUserRole('Customer');

        $userManager = new UserManager(new SQLConnector());
        $actualValue = $userManager->save($userDataTransferObject);

        $userRepository = new UserRepository();
        $listFromDatabase = $userRepository->getUser($userDataTransferObject->getUserName(), $userDataTransferObject->getPassword());


        self::assertSame($userDataTransferObject->getId(), $listFromDatabase->getId());
        self::assertSame($userDataTransferObject->getUserName(), $listFromDatabase->getUserName());
        self::assertSame($userDataTransferObject->getPassword(), $listFromDatabase->getPassword());
    }

    public function testDelete(): void
    {
        $this->userHelper->createTemporaryUsers();
        $userRepository = new UserRepository();
        $userDataTransferObject = $userRepository->getUserById(2);

        $userManager = new UserManager(new SQLConnector());
        $userManager->delete($userDataTransferObject);

        self::assertNull($userRepository->getUserById(2));
    }
}
