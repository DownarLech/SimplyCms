<?php
declare(strict_types=1);

namespace Test;

use App\Models\Dto\UserDataTransferObject;
use App\Models\UserRepository;
use App\Services\Container;
use App\Services\DependencyProvider;
use App\Services\SQLConnector;
use PHPUnit\Framework\TestCase;
use Test\phpunit\Helper\UserHelperTest;

class UserRepositoryTest extends TestCase
{
    private UserRepository $userRepository;
    private UserHelperTest $userHelper;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $container = new Container();
        $containerProvider = new DependencyProvider();
        $containerProvider->providerDependency($container);

        $this->userRepository = new  UserRepository($container);
        $this->userHelper = new UserHelperTest();
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->userHelper->deleteTemporaryUsers();
    }

    public function testGetUserList(): void
    {
        $listOfUsers = $this->userHelper->createTemporaryUsers();
        $userDataTransferList = $this->userRepository->getUserList();

        self::assertCount(3, $userDataTransferList);
        self::assertSame(1,$this->userRepository->getUser('John','a')->getId());
        self::assertSame('Mark', $this->userRepository->getUser('Mark', 'b')->getUserName());
        self::assertSame('b', $this->userRepository->getUser('Mark', 'b')->getPassword());
        self::assertSame('Admin', $this->userRepository->getUser('John', 'a')->getUserRole());

    }

    public function testGetUser(): void
    {
        $listOfUsers = $this->userHelper->createTemporaryUsers();
        $userSingle = $this->userRepository->getUser('Tom','c');

        self::assertInstanceOf(UserDataTransferObject::class, $userSingle);
        self::assertSame(3, $this->userRepository->getUser('Tom','c')->getId());
        self::assertSame('Tom', $userSingle->getUserName());
        self::assertSame('c', $userSingle->getPassword());
        self::assertSame('Customer', $userSingle->getUserRole());
    }

    public function testGetProductWhenUserIdNotFound (): void
    {
        self::assertNull($this->userRepository->getUser('William', 'z'));
    }

}
