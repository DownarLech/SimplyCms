<?php declare(strict_types=1);

namespace Test;

use App\Component\Category\Persistence\Models\CategoryManager;
use App\Component\Category\Persistence\Models\CategoryRepository;
use App\Shared\Dto\CategoryDataTransferObject;
use App\System\DI\Container;
use App\System\DI\DependencyProvider;
use PHPUnit\Framework\TestCase;
use Test\phpunit\Helper\CategoryHelperTest;

class CategoryRepositoryTest extends TestCase
{
    private CategoryManager $categoryManager;
    private CategoryRepository $categoryRepository;
    private CategoryHelperTest $categoryHelper;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $container = new Container();
        $containerProvider = new DependencyProvider();
        $containerProvider->providerDependency($container);

        $this->categoryManager = $container->get(CategoryManager::class);
        $this->categoryRepository = $container->get(CategoryRepository::class);

        $this->categoryHelper = new CategoryHelperTest();

        $this->categoryHelper->createTemporaryCategories();
    }

    protected function tearDown(): void
    {
        $this->categoryHelper->deleteTemporaryCategories();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }



    public function testGetCategoryList(): void
    {
        $categoryDtoList = $this->categoryRepository->getCategoryList();

        self::assertCount(3, $categoryDtoList);

        self::assertSame(2, $categoryDtoList[2]->getId());
        self::assertSame(2, $this->categoryRepository->getCategoryById(2)->getId());

        self::assertSame('smartphone', $categoryDtoList[2]->getName());

        self::assertSame(1, $categoryDtoList[1]->getId());
        self::assertSame('tablet', $categoryDtoList[1]->getName());

        self::assertSame(3, $categoryDtoList[3]->getId());
        self::assertSame('laptop', $categoryDtoList[3]->getName());
    }

    public function testGetCategoryById(): void
    {
        $category = $this->categoryRepository->getCategoryById(3);

        self::assertInstanceOf(CategoryDataTransferObject::class, $category);
        self::assertSame(3, $category->getId());
        self::assertSame('laptop', $category->getName());
    }

    public function testGetCategoryByName(): void
    {
        $category = $this->categoryRepository->getCategoryByName('tablet');

        self::assertInstanceOf(CategoryDataTransferObject::class, $category);
        self::assertSame(1, $category->getId());
        self::assertSame('tablet', $category->getName());
    }

    public function testGetCategoryByIdWhenCategoryNotFound(): void
    {
        self::assertNull($this->categoryRepository->getCategoryById(8));
    }

    public function testGetCategoryByNameWhenCategoryNotFound(): void
    {
        self::assertNull($this->categoryRepository->getCategoryByName('fridge'));
    }
}
