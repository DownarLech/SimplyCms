<?php declare(strict_types=1);

namespace Test;

use App\Component\Category\Persistence\Models\CategoryManager;
use App\Component\Category\Persistence\Models\CategoryRepository;
use App\Shared\Dto\CategoryDataTransferObject;
use App\System\DI\Container;
use App\System\DI\DependencyProvider;
use PHPUnit\Framework\TestCase;
use Test\phpunit\Helper\CategoryHelperTest;

class CategoryManagerTest extends TestCase
{
    private CategoryManager $categoryManager;
    private CategoryRepository $categoryRepository;
    private CategoryHelperTest $categoryHelper;

    protected function setUp(): void
    {
        parent::setUp();
        $container = new Container();
        $containerProvider = new DependencyProvider();
        $containerProvider->providerDependency($container);

        $this->categoryManager = $container->get(CategoryManager::class);
        $this->categoryRepository = $container->get(CategoryRepository::class);

        $this->categoryHelper = new CategoryHelperTest();
    }

    protected function tearDown(): void
    {
        $this->categoryHelper->deleteTemporaryCategories();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testSaveInsert(): int
    {
        $categoryDto = new CategoryDataTransferObject();
        $categoryDto->setId(1);
        $categoryDto->setName('tablet');

        $actualValue = $this->categoryManager->save($categoryDto);
        $dataBaseValue = $this->categoryRepository->getCategoryById($categoryDto->getId());

        self::assertSame($categoryDto->getId(), $dataBaseValue->getId());
        self::assertSame($categoryDto->getName(), $dataBaseValue->getName());

        return $dataBaseValue->getId();
    }

    public function testSaveUpdate(): int
    {
        $id = $this->testSaveInsert();

        $categoryDto = new CategoryDataTransferObject();
        $categoryDto->setId($id);
        $categoryDto->setName('fridge');

        $actualValue = $this->categoryManager->save($categoryDto);
        $dataBaseValue = $this->categoryRepository->getCategoryById($categoryDto->getId());

        self::assertSame($categoryDto->getId(), $dataBaseValue->getId());
        self::assertSame($categoryDto->getName(), $dataBaseValue->getName());

        return $dataBaseValue->getId();
    }

    public function testDelete(): void
    {
        $id = $this->testSaveUpdate();

        $dataBaseValue = $this->categoryRepository->getCategoryById($id);
        $this->categoryManager->delete($dataBaseValue);

        self::assertNull($this->categoryRepository->getCategoryById($id));
    }

    public function testSaveInsertWithOutId(): void
    {
        $categoryDto = new CategoryDataTransferObject();
        $categoryDto->setName('tablet');

        $actualValue = $this->categoryManager->save($categoryDto);
        $dataBaseValue = $this->categoryRepository->getCategoryById($actualValue->getId());

        self::assertSame($categoryDto->getName(), $dataBaseValue->getName());
    }

    public function testSaveInsertWithOutName(): void
    {
        $categoryDto = new CategoryDataTransferObject();
        $categoryDto->setId(76);

        $this->categoryManager->save($categoryDto);

        $categoryDto->setName('tablet');
        $actualValue = $this->categoryManager->save($categoryDto);

        $dataBaseValue = $this->categoryRepository->getCategoryById($categoryDto->getId());

        self::assertSame($categoryDto->getId(), $dataBaseValue->getId());
        self::assertSame($categoryDto->getName(), $dataBaseValue->getName());
    }


}
