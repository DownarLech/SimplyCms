<?php declare(strict_types=1);

namespace Test\phpunit\Component\Product\Business\Csv;

use App\Component\Product\Business\Csv\CsvProductImporter;
use App\Component\Product\Business\ProductBusinessFacade;
use App\Component\Product\Business\ProductBusinessFacadeInterface;
use App\Component\Product\Persistence\Mapper\ProductMapper;
use App\Component\Product\Persistence\Mapper\ProductMapperInterface;
use App\Shared\Dto\ProductDataTransferObject;
use App\System\DI\Container;
use App\System\DI\DependencyProvider;
use PHPUnit\Framework\TestCase;
use Test\phpunit\Helper\CategoryHelperTest;
use Test\phpunit\Helper\ProductHelperTest;

class CsvProductImporterTest extends TestCase
{
    private ProductMapperInterface $productMapper;
    private ProductBusinessFacadeInterface $productBusinessFacade;
    private CsvProductImporter $csvProductImporter;
    private CategoryHelperTest $categoryHelper;
    private ProductHelperTest $productHelper;


    protected function setUp(): void
    {
        parent::setUp();
        $container = new Container();
        $containerProvider = new DependencyProvider();
        $containerProvider->providerDependency($container);

        $this->productMapper = $container->get(ProductMapper::class);
        $this->productBusinessFacade = $container->get(ProductBusinessFacade::class);
        $this->csvProductImporter = $container->get(CsvProductImporter::class);

        $this->categoryHelper = new CategoryHelperTest();
        $this->productHelper = new ProductHelperTest();
    }

    /**
     * @throws \Propel\Runtime\Exception\PropelException
     */
    protected function tearDown(): void
    {
        $this->categoryHelper->deleteTemporaryCategories();
        $this->productHelper->deleteTemporaryProducts();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws \League\Csv\Exception
     */
    public function testSaveAsCsvDto(): void
    {
        $path = __DIR__ . '/../../../../CsvFile/csvDataInsert.csv';
        $csvDtoList = $this->csvProductImporter->loadDataAsCsvDto($path);

        $this->saveCsvInDB($csvDtoList);

        $productListFromDb = $this->productBusinessFacade->getProductList();

        self::assertCount(6, $productListFromDb);

        foreach ($csvDtoList as $csvDto) {
            $productFromDb = $this->productBusinessFacade->getProductById($csvDto->getId());
            self::assertSame($csvDto->getId(), $productFromDb->getId());
            self::assertSame($csvDto->getName(), $productFromDb->getName());
            self::assertSame($csvDto->getDescription(), $productFromDb->getDescription());
        }
    }

    public function testUpdateSaveAsCsvDto(): void
    {
        $path = __DIR__ . '/../../../../CsvFile/csvDataInsert.csv';
        $csvDtoList = $this->csvProductImporter->loadDataAsCsvDto($path);

        $this->saveCsvInDB($csvDtoList);

        $path = __DIR__ . '/../../../../CsvFile/csvDataUpdate.csv';
        $csvDtoList = $this->csvProductImporter->loadDataAsCsvDto($path);

        $this->saveCsvInDB($csvDtoList);


        $productListFromDb = $this->productBusinessFacade->getProductList();

        self::assertCount(7, $productListFromDb);

        foreach ($csvDtoList as $csvDto) {
            $productFromDb = $this->productBusinessFacade->getProductById($csvDto->getId());
            self::assertSame($csvDto->getId(), $productFromDb->getId());
            self::assertSame($csvDto->getName(), $productFromDb->getName());
            self::assertSame($csvDto->getDescription(), $productFromDb->getDescription());
        }
    }

    private function saveCsvInDB(array $csvDtoList): void
    {
        $productDtoList = [];
        foreach ($csvDtoList as $csvDto) {
            $productDtoList[] = $this->productMapper->mapFromCsv($csvDto);
        }

        foreach ($productDtoList as $product) {
            self::assertInstanceOf(ProductDataTransferObject::class, $product);
            $this->productBusinessFacade->save($product);
            //  Cannot insert a value for auto-increment primary key
            // allowPkInsert=true  into <table> schema.xml
        }
    }

}
