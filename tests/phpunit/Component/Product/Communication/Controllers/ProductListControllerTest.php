<?php declare(strict_types=1);

namespace Test;

use App\Component\Product\Communication\Controllers\Backend\ProductListController;
use App\System\DI\Container;
use App\System\DI\DependencyProvider;
use App\System\Smarty\Redirect;
use App\System\Smarty\ViewService;
use PHPUnit\Framework\TestCase;
use Test\phpunit\Helper\ProductHelperTest;

class ProductListControllerTest extends TestCase
{
    private ProductHelperTest $productHelper;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->productHelper = new ProductHelperTest();
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->productHelper->deleteTemporaryProducts();
    }


    public function testAction()
    {
        $listOfProducts = $this->productHelper->createTemporaryProducts();

        $container = new Container();
        $containerProvider = new DependencyProvider();
        $containerProvider->providerDependency($container);

        $viewService = $container->get(ViewService::class);

        $category = new ProductListController($container);

        $category->action();
        //dump($viewService->getParams());

        $temp = $viewService->getParams();
        self::assertArrayHasKey('productList', $temp);

        $one = $temp['productList'][2];
        self::assertSame(2, $one->getId());
        self::assertSame('mark', $one->getName());
        self::assertSame('lorem mark', $one->getDescription());
    }

    public function testInit(): void
    {
        $container = new Container();
        $containerProvider = new DependencyProvider();
        $containerProvider->providerDependency($container);
        $_SESSION['username'] = false;

        $mockRedirect = $this->createMock(Redirect::class);
        $mockRedirect->expects(self::once())
            ->method('redirectToBackend')
            ->with(self::equalTo('index.php?page=login&admin=true'));

        $container->set(Redirect::class, $mockRedirect);

        $category = new ProductListController($container);
        $category->init();

        self::assertTrue($_SESSION['username']);
    }


    public function testInitNegative(): void
    {
        $container = new Container();
        $containerProvider = new DependencyProvider();
        $containerProvider->providerDependency($container);

        $mockRedirect = $this->createMock(Redirect::class);
        $mockRedirect->expects(self::never())
            ->method('redirectToBackend');

        $container->set(Redirect::class, $mockRedirect);

        $_SESSION['username'] = true;
        $categoryController = new ProductListController($container);
        $categoryController->init();
    }
}
