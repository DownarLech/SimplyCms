<?php

use App\Controllers\Backend\ProductController;
use App\Services\ViewService;
use App\Models\Dto\ProductDataTransferObject;
use Helper\ProductManagerTestHelper;

class ProductControllerTest extends \Codeception\Test\Unit
{
    /**
     * @var \UnitTester
     */
    protected $tester;
    /**
     * @var ProductManagerTestHelper
     */
    private ProductManagerTestHelper $productHelper;

    protected function _before()
    {
        $this->productHelper = new ProductManagerTestHelper();
    }

    protected function _after()
    {
        $_GET = [];
        parent::_after(); // TODO: Change the autogenerated stub
        $this->productHelper->deleteProducts();
    }


    public function testLoadView()
    {
        $listOfProducts = $this->productHelper->createProducts();

        $viewService = new ViewService();
        $product = new ProductController($viewService);
        $_GET['id'] = 1;
        $product->loadView();

        $temp = $viewService->getParams();
        self::assertArrayHasKey('product', $temp);

        $one = $temp['product'];
        self::assertSame(1, $one->getId());
        self::assertSame('john', $one->getName());
    }

    public function testLoadViewError()
    {
        $viewService = new ViewService();
        $product = new ProductController($viewService);
        $_GET['id'] = 0;
        $product->loadView();

        self::assertStringEndsWith('error.tpl', $viewService->getTemplate());
        //$this->expectException(Exception::class);
    }


    /*
    public function testException() {

        $viewService = new ViewService();

        $product = new ProductController($viewService);
        $product->action();
        self::assertSame('error.tpl', $viewService->getTemplate());
        dump($viewService->getTemplate());

    }
    */


}