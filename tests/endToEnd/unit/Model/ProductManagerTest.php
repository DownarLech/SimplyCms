<?php

declare(strict_types=1);

namespace tests\unit\Model;

use App\Models\Dto\ProductDataTransferObject;
use App\Models\ProductManager;
use App\Models\ProductRepository;
use App\Services\SQLConnector;
use Helper\ProductManagerTestHelper;

class ProductManagerTest extends \Codeception\Test\Unit
{
    /**
     * @var \UnitTester
     */
    protected $tester;

    private ProductManagerTestHelper $productHelper;

    protected function _before()
    {
        $this->productHelper = new ProductManagerTestHelper();

    }

    protected function _after()
    {
        $this->productHelper->deleteProducts();
        parent::_after(); // TODO: Change the autogenerated stub
    }

    public function testSaveInsert(): void
    {
        $productDataTransferObject = new ProductDataTransferObject();
        $productDataTransferObject->setName('filip');
        $productDataTransferObject->setDescription('lorem filip');

        $productManager =  new ProductManager(new SQLConnector());
        $actualValue = $productManager->save($productDataTransferObject);

        $productRepository = new ProductRepository();
        $valueFromDatabase = $productRepository->getProduct($actualValue->getId());

        self::assertSame('filip', $valueFromDatabase->getName());
        self::assertSame('lorem filip', $valueFromDatabase->getDescription());
        //$this->productHelper->deleteProducts();
    }

    public function testSaveUpdate(): void
    {
        $listOfProducts = $this->productHelper->createProducts();

        $productDataTransferObject = new ProductDataTransferObject();
        $productDataTransferObject->setId($listOfProducts[2]->getId());
        $productDataTransferObject->setName('Unit Test');
        $productDataTransferObject->setDescription('Blbalbal');

        $productManager =  new ProductManager(new SQLConnector());
        $actualValue = $productManager->save($productDataTransferObject);

        $productRepository = new ProductRepository();
        $listFromDatabase = $productRepository->getProduct($productDataTransferObject->getId());

        //self::assertSame($actualValue->getId(), $listFromDatabase->getId());

        self::assertSame($productDataTransferObject->getId(), $listFromDatabase->getId());
        self::assertSame($productDataTransferObject->getName(), $listFromDatabase->getName());
        self::assertSame($productDataTransferObject->getDescription(), $listFromDatabase->getDescription());
    }
}