<?php

use App\Models\Dto\ProductDataTransferObject;
use App\Models\ProductRepository;
use Helper\ProductManagerTestHelper;

class ProductRepositoryTest extends \Codeception\Test\Unit
{
    /**
     * @var \UnitTester
     */
    protected $tester;
    /**
     * @var ProductRepository
     */
    private ProductRepository $productRepository;
    private ProductManagerTestHelper $productHelper;

    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub

        $this->productRepository = new  ProductRepository();
        $this->productHelper = new ProductManagerTestHelper();
    }

    protected function _after()
    {
        parent::_after(); // TODO: Change the autogenerated stub
        $this->productHelper->deleteProducts();

    }

    public function testGetProductList(): void
    {
        $listOfProducts = $this->productHelper->createProducts();
        $productDataTransferList = $this->productRepository->getProductList();

        self::assertCount(4, $productDataTransferList);
        self::assertSame(3,$this->productRepository->getProduct(3)->getId());
        self::assertSame('mark', $this->productRepository->getProduct(2)->getName());

        self::assertSame('lorem george', $this->productRepository->getProduct(4)->getDescription());
    }

    public function testGetProduct(): void
    {
        $listOfProducts = $this->productHelper->createProducts();
        $productSingle = $this->productRepository->getProduct(3);

        self::assertInstanceOf(ProductDataTransferObject::class, $productSingle);
        self::assertSame(3, $productSingle->getId());
        self::assertSame('tom', $productSingle->getName());
        self::assertSame('lorem tom', $productSingle->getDescription());
    }

    public function testGetProductWhenProductIdNotFound (): void
    {
        $this->expectException(\OutOfBoundsException::class);
        $this->productRepository->getProduct(0);
    }
}